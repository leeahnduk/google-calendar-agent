# =============================================================================
# Google Cloud Configuration
# =============================================================================

# Your Google Cloud Project ID
GOOGLE_CLOUD_PROJECT=your-project-id

# Your Google Cloud Project Number (get with: gcloud projects describe PROJECT_ID --format="value(projectNumber)")
GOOGLE_CLOUD_PROJECT_NUMBER=123456789012

# Google Cloud region (us-central1 recommended for Vertex AI)
GOOGLE_CLOUD_LOCATION=us-central1

# Google Cloud Storage staging bucket for agent deployments
STAGING_BUCKET=gs://your-staging-bucket

# =============================================================================
# Agent Configuration
# =============================================================================

# Display name for the agent (will appear in AgentSpace)
AGENT_DISPLAY_NAME=Meeting_Prep_Agent_New

# OAuth authorization ID (must match authorization created in Google Cloud)
AUTH_ID=your-auth-id

# =============================================================================
# AgentSpace Configuration
# =============================================================================

# AgentSpace app/engine ID (find with Discovery Engine API)
AS_APP=your-agentspace-app-id

# Assistant ID within the AgentSpace app (usually "default_assistant")
ASSISTANT_ID=default_assistant

# Internal agent name (lowercase, hyphens, no spaces)
AGENT_NAME=your-agent-name

# Agent description for AgentSpace
AGENT_DESCRIPTION="Your agent description here"

# Tool description for AgentSpace
TOOL_DESCRIPTION="Description of what your agent's tools do"

# Reasoning engine resource name (set after deploying with Python script)
REASONING_ENGINE=projects/PROJECT_NUMBER/locations/LOCATION/reasoningEngines/ENGINE_ID

# =============================================================================
# AI Model Configuration
# =============================================================================

# Primary agent AI model
ROOT_AGENT_MODEL=gemini-2.5-flash

# Sub-agent AI model
SUB_AGENT_MODEL=gemini-2.5-flash

# =============================================================================
# Agent Behavior Settings
# =============================================================================

# Minutes before meeting start to prepare brief
BRIEF_LEAD_MINUTES=30

# Days to look back for historical meeting context
HISTORICAL_LOOKBACK_DAYS=90

# =============================================================================
# Chat Integration Preferences
# =============================================================================

# Enable Google Chat integration
GOOGLE_CHAT_ENABLED=true

# Chat integration preference: "slack", "google_chat", or "both"
CHAT_INTEGRATION_PREFERENCE=both

# =============================================================================
# Optional: Slack Integration
# =============================================================================

# Slack bot token (optional, for Slack integration)
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token

# Slack signing secret (optional, for Slack integration)
SLACK_SIGNING_SECRET=your-slack-signing-secret

# =============================================================================
# OAuth 2.0 Credentials
# =============================================================================

# Google OAuth 2.0 Client ID
CLIENT_ID=your-client-id.apps.googleusercontent.com

# Google OAuth 2.0 Client Secret
CLIENT_SECRET=your-client-secret

# OAuth 2.0 scopes (space-separated, required for AgentSpace authorization)
SCOPES="https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/chat.messages.readonly https://www.googleapis.com/auth/chat.spaces.readonly https://www.googleapis.com/auth/gmail.readonly"

# =============================================================================
# Setup Instructions
# =============================================================================

# 1. Copy this file to .env and fill in your values
# 2. Create OAuth 2.0 credentials in Google Cloud Console
# 3. Deploy the reasoning engine: python agents/meeting_prep_agent.py
# 4. Update REASONING_ENGINE with the output resource name
# 5. Create authorization: ./scripts/create_authorization.sh
# 6. Register in AgentSpace: ./scripts/create_agent.sh
# 7. Test in AgentSpace web interface

# =============================================================================
# Notes
# =============================================================================

# - PROJECT_NUMBER can be found with: gcloud projects describe PROJECT_ID --format="value(projectNumber)"
# - AS_APP can be found by listing Discovery Engine apps in your project
# - REASONING_ENGINE is set automatically after deploying with the Python script
# - All descriptions should be quoted if they contain spaces
# - SCOPES must be quoted and space-separated for proper parsing